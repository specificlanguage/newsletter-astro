---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from "../../components/FormattedDate.astro";
import {readingTime, stripHTML} from "../../lib/frontPage.ts/frontPageHelpers";

export const prerender = false;

const { pageN } = Astro.params;
let pageNum: number;

try {
    pageNum = parseInt(pageN);
} catch {
    return Astro.redirect("/"); // Trust me this is weird but ok...
}

export async function getStaticPaths({paginate}) {
    const newsletterPages = (await getCollection("newsletter"));
    newsletterPages.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
    return paginate(newsletterPages, { pageSize: 5 });
}

const { page } = Astro.props;

if(pageNum > page.lastPage){
    return Astro.redirect("/")
}

---

<!DOCTYPE html>
<html lang="en">
<head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
</head>
<body>
<Header title={SITE_TITLE} />
<main>
    {page.data.map((entry) => (
            <div class="mb-10">
                <a href={"/newsletter/" + entry.slug}><img src={"/" + entry.data.image}/></a>
                <a href={"/newsletter/" + entry.slug}><h2 class="-mb-2 font-headings">{entry.data.title}</h2></a>
                <p class="-mb-1 dark:text-neutral-400 text-neutral-700">{stripHTML(entry.body).slice(0, 450)}...</p>
                <div class="flow-root space-x-5 text-neutral-800 dark:text-neutral-200 ">
                    <p class="text-sm font-sans-serif float-left">
                        <i class="fa-regular fa-clock"/>{" "} {readingTime(stripHTML(entry.body))}
                    </p>
                    <p class="text-sm font-sans-serif float-left">
                        <i class="fa-regular fa-calendar"/>{" "} <FormattedDate date={entry.data.date}/>
                    </p>
                </div>
            </div>
        ))}
    <div class="grid grid-cols-3 justify-items-center paginate">
        <div>
            {(page.currentPage == 2) && <a href="/">Previous</a>}
            {(page.currentPage - 1 <= page.lastPage && page.currentPage > 2) &&
                    <a class="p-3 border-1 border-neutral-200  hover:bg-neutral-500 hover:text-white" href={"/page/" + (page.currentPage - 1).toString()}>Previous</a>
            }
        </div>
        <div>
            Page {page.currentPage} / {page.lastPage}
        </div>
        <div>
            {page.currentPage + 1 <= page.lastPage &&
                    <a class="p-3 border-1 border-neutral-200  hover:bg-neutral-500 hover:text-white" href={"/page/" + (page.currentPage + 1).toString()}>Next</a>
            }
        </div>
    </div>
</main>
<Footer />
</body>
</html>